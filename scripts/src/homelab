#!/usr/bin/env bash
# Launcher for homelab_status_page build.sh, run.sh, and autotag

ROOT="$(dirname "$(readlink -f "$0")")"
COMMAND=$1
# No such file or directory (homelab) adnan@adnan-ROG-STRIX-G15CF-G15CF:~/homelab/scripts$ ln -s ~/homelab/scripts/homelab /usr/local/bin/homelab
shift;
# curl ifconfig.me
 #scp public/* adnan@gpu:~/derp/support_bret/public/
 # ncdu --ignore-dir .git .gitignore node_modules
# ncdu --exclude .git --exclude node_modules --exclude .venv
if [ "$COMMAND" = "kentbeck" ] || [ "$COMMAND" = "build.sh" ]; then
    bun run ~/homelab_status_page/web-ui/js/helpers/Kent_Beck_robusteness.js
elif [ "$COMMAND" = "web" ] || [ "$COMMAND" = "web-ui" ]; then
    bun run ~/homelab_status_page/web-ui/my-app/src/index.js
elif [ "$COMMAND" = "web-docker" ]; then
    docker run -p 3000:3000 homelab_status_page
elif [ "$COMMAND" = "show" ]; then
    #$ROOT/build.sh --show "$@"
    echo "Running run.sh..."
elif [ "$COMMAND" = "update" ]; then
    echo "Running install.sh..."
elif [ "$COMMAND" = "data" ]; then
    echo $ROOT/data
elif [ "$COMMAND" = "replit" ]; then
    echo "Running install..."
elif [ "$COMMAND" = "bootstrap" ]; then
    echo "Running bootstrap..."
    bash ~/homelab_status_page/scripts/_bootstrap.sh

elif [ "$COMMAND" = "claude" ]; then
    echo "Running bootstrap..."
    bash ~/homelab_status_page/scripts/claude.js

elif [ "$COMMAND" = "anthropic" ]; then
    echo "Running bootstrap..."

elif [ "$COMMAND" = "test" ]; then
    echo "Running bootstrap..."
    bash ~/homelab_status_page/scriptts/test.js
elif [ "$COMMAND" = "restart" ]; then
    echo "Running restart-blog..."
    #bash ~/homelab_status_page/scripts/_bootstrap.sh
    bash ~/homelab/scripts/restart-blog.sh
elif [ "$COMMAND" = "commit" ]; then
    echo "Running download-papers..."
    git add ~/homelab && git commit -am 'simplify' && git push origin HEAD
else
    echo 'default PARAM'
    # echo 'homelab > Invalid command'
    # echo ''
    # echo '   * build [PACKAGES]'
    # echo '   * run OPTIONS [CONTAINER:TAG] CMD'
    # echo '   * list [PACKAGES|*'
    # echo '   * show [PACKAGES]*'
    # echo '   * autotag [CONTAINER]'
    # echo '   * update (runs git pull)'
    # echo '   * root (prints repo path)'
    # echo '   * data (prints data path)'
    # echo '   * install'
    # echo '   * bootstrap'
    # echo '   * restart-blog (default)'
    # echo ''
    # echo 'Run "homelab <CMD> --help" for more info.'
    # echo "this command does not exist, should i create a magic spell we can work and cast together oner? "    
    # exit 1
fi

#docker run -it --runtime nvidia --privileged -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix stereolabs/zed:3.7-gl-devel-cuda11.4-ubuntu20.04




# docker exec 34320163bee6 /bin/bash


# docker run -it --runtime nvidia --privileged -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix 34320163bee6

# ncdu --exclude-dir .git .gitignore


#!/bin/bash



install_whisper() {
    echo "Installing Whisper with micromamba..."

    # Check if micromamba is installed
    if ! command -v micromamba &> /dev/null; then
        echo "Error: micromamba is not installed. Please install it first."
        exit 1
    fi

    # Create and activate environment
    echo "Creating new environment 'whisper_env'..."
    micromamba create -n whisper_env python=3.9 -y

    # Source the micromamba shell script to enable activate command
    eval "$(micromamba shell hook --shell bash)"

    echo "Activating whisper_env..."
    micromamba activate whisper_env

    # Install dependencies
    echo "Installing pip..."
    micromamba install pip -y

    echo "Installing Whisper..."
    pip install git+https://github.com/openai/whisper.git

    # Install PyTorch with CUDA support
    echo "Installing PyTorch with CUDA support..."
    micromamba install pytorch torchvision torchaudio -c pytorch -y

    echo "Installation complete!"
    echo "To transcribe an audio file, use:"
    echo "whisper path_to_your_audio.mp3 --model small"

    # Keep environment activated for user
    exec $SHELL

}